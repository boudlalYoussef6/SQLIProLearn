{% extends 'site.html.twig' %}

{% block title %}Courses{% endblock %}

{% block content %}

    {% if pagination  is defined and pagination is not empty %}
        <section class="content">
            <div class="container-fluid">
                <h2>List of Courses</h2>
                <div class="row">
                    {% for course in pagination %}
                        <div class="col-3">
                            <div class="card">
                                <img class="card-img-top"
                                     src="{{ asset(random(['images/php_Elephant.jpg', 'images/php_Elephant_V2.jpg', 'images/php_Elephant_V3.jpg'])) }}"
                                     alt="image of the course"
                                     style="height: 20vh; object-fit: cover;">
                                <div class="card-body" style="height: 120px">
                                    <h3 class="card-title font-weight-bold">{{ course.label }}</h3>
                                    <p class="card-text">
                                        {{ course.description|striptags|length > 50 ? course.description|striptags|slice(0, 50) ~ '...' : course.description|striptags }}
                                    </p>
                                </div>
                                <div class="card-footer">
                                    <a href="{{ url('app_course_details', {'id': course.id}) }}" class="btn btn-primary">
                                        <i class="fa-solid fa-eye"></i> Voir le cours
                                    </a>
                                    {% if is_granted('edit', course) %}
                                        <a href="{{ url('app_course_edit', {'id': course.id}) }}" class="btn btn-warning">Edit</a>
                                    {% endif %}
                                    {% if is_granted('delete', course) %}
                                        <a href="{{ url('app_course_delete', {'id': course.id}) }}" class="btn btn-danger">Delete</a>
                                    {% endif %}

                                    {% if app.user %}
                                        {% set isFavorite = false %}
                                        {% for favory in favoriteCourses %}
                                            {% if favory.course.id == course.id %}
                                                {% set isFavorite = true %}
                                            {% endif %}
                                        {% endfor %}

                                        <button class="btn btn-outline-secondary btn-toggle-favorite"
                                                data-course-id="{{ course.id }}"
                                                data-toggle-url="{{ path('app_favorite_toggle', {'id': course.id}) }}"
                                                data-remove-url="{{ path('app_favorite_remove', {'id': course.id}) }}"
                                                {% if isFavorite %}data-is-favorite="true"{% endif %}
                                        >
                                            {% if isFavorite %}
                                                <i class="fas fa-star favorite"></i>
                                            {% else %}
                                                <i class="fas fa-star not-favorite"></i>
                                            {% endif %}
                                        </button>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                </div>

                <div class="pagination">
                    {{ knp_pagination_render(pagination) }}
                </div>
            </div>
        </section>
    {% else %}
        <div class="alert alert-warning" role="alert">
            Pas de cours dispoinible
        </div>
    {% endif %}
{% endblock %}

{% block custum_css %}
    <style>
        .favorite {
            color: yellow;
        }
        .not-favorite {
            color: grey;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const toggleButtons = document.querySelectorAll('.btn-toggle-favorite');

            toggleButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const courseId = this.getAttribute('data-course-id');
                    const isFavorite = this.hasAttribute('data-is-favorite');
                    const toggleUrl = isFavorite ?
                        this.getAttribute('data-remove-url') :
                        this.getAttribute('data-toggle-url');

                    fetch(toggleUrl, {
                        method: 'POST',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'Content-Type': 'application/json'
                        },
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.status === 'success') {
                                if (isFavorite) {
                                    this.removeAttribute('data-is-favorite');
                                    this.innerHTML = '<i class="fas fa-star not-favorite"></i>';
                                } else {
                                    this.setAttribute('data-is-favorite', 'true');
                                    this.innerHTML = '<i class="fas fa-star favorite"></i>';
                                }

                                // Afficher un toast de succès
                                const toastClass = isFavorite ? 'bg-danger' : 'bg-success';
                                $(document).Toasts('create', {
                                    class: toastClass,
                                    title: 'Favoris mis à jour',
                                    body: data.message
                                });
                            } else {
                                // Afficher un toast d'erreur en rouge
                                $(document).Toasts('create', {
                                    class: 'bg-danger',
                                    title: 'Erreur',
                                    body: data.message
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            // Afficher un toast d'erreur réseau en rouge
                            $(document).Toasts('create', {
                                class: 'bg-danger',
                                title: 'Erreur',
                                body: 'Une erreur réseau est survenue. Veuillez vérifier votre connexion Internet.'
                            });
                        });
                });
            });
        });

    </script>
{% endblock %}
